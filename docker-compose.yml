services:
  watchtower:
    image: ghcr.io/containrrr/watchtower
    container_name: StoX_Watchtower
    restart: unless-stopped
    command:
      - "--label-enable" # Enable the ability to filter containers by label
      - "--interval" # Check for updates every 30 seconds
      - "30" # Check for updates every 30 seconds
      - "--rolling-restart" # Restart services one at a time
      - "--cleanup" # Remove old images after updating
    environment:
      - REPO_USER=${GHCR_USERNAME}
      - REPO_PASS=${GHCR_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Mounts the Docker socket for communication
    networks:
      - public
    env_file:
      - .env

  reverse-proxy:
    image: traefik:v3.2
    container_name: StoX_ReverseProxy
    restart: unless-stopped
    command:
      - "--api.insecure=true" # Enable insecure API
      - "--providers.docker=true" # Enable Docker provider
      - "--log.level=ERROR"
      - "--accesslog=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=mjmax36@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=./acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entryPoints.web.forwardedHeaders.insecure"
      - "--entryPoints.websecure.forwardedHeaders.insecure"
      - "--configFile=/config.yml"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      # - "8000:8000"
      # - "3000:3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - ./proxy/dynamic.yml:/dynamic.yml:ro
      - ./proxy/acme.json:/acme.json
      - ./proxy/config.yml:/config.yml:ro
    networks:
      - public

  frontend:
    # build:
    #   context: frontend
    #   target: development
    image: ghcr.io/bnb-initivatives/stox_prod_test-frontend:latest
    # container_name: StoX_Frontend
    # environment:
    #   - REACT_APP_API_URL=http://localhost:80
    ports:
      - 3000:3000
    volumes:
      - ./frontend/src:/code/src
    labels:
      - "traefik.enable=true" # Enables Traefik for this service
      # - "traefik.http.services.frontend.loadbalancer.server.port=3000" # Specifies the service port
      # - "traefik.http.routers.frontend.rule=Host(`stox.systems`)" # Specifies the routing rule
      - "traefik.http.routers.frontend-secure.entrypoints=websecure" # Specifies the secure entry point
      - "traefik.http.routers.frontend-secure.rule=Host(`stox.systems`)" # Specifies the secure routing rule
      - "traefik.http.routers.frontend-secure.tls.certresolver=myresolver" # Specifies the certificate resolver
      - "traefik.http.middlewares.frontend-ratelimit.ratelimit.average=20" # Specifies the average rate limit
      - "traefik.http.routers.frontend.middlewares=frontend-ratelimit" # Specifies the middleware
      - "com.centurylinklabs.watchtower.enable=true" # Enables Watchtower for this service
    depends_on:
      - backend
      - reverse-proxy
    networks:
      - public
    env_file:
      - .env
    deploy:
      mode: replicated
      replicas: 3
    restart: always

  backend:
    # build:
    #   context: backend
    image: ghcr.io/bnb-initivatives/stox_prod_test-backend:latest
    container_name: StoX_Backend # Optional name for the container
    ports:
      - 8000:8000
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=dbadmin
      - POSTGRES_DB=stox
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    labels:
      - "traefik.enable=true" # Enables Traefik for this service
      # - "traefik.http.routers.backend.rule=(Host(`.stox.systems`) && PathPrefix(`/api`))" # Specifies the routing rule
      # - "traefik.http.services.backend.loadbalancer.server.port=8000" # Specifies the service port
      - "traefik.http.routers.backend-secure.entrypoints=websecure" # Specifies the secure entry point
      - "traefik.http.routers.backend-secure.rule=Host(`stox.systems`) && PathPrefix(`/api`)" # Specifies the secure routing rule
      - "traefik.http.routers.backend-secure.tls.certresolver=myresolver" # Specifies the certificate resolver
      # - "com.centurylinklabs.watchtower.enable=true" # Enables Watchtower for this service
    networks:
      - public # Assigns this service to the shared network
      - private # Assigns this service to the shared network
    secrets:
      - db-password # Specifies the secret for the database password
    depends_on:
      # - reverse-proxy
      db:
        condition: service_healthy
    env_file:
      - .env
    restart: always

  db:
    image: postgres:13-alpine
    restart: always
    container_name: StoX_Database
    secrets:
      - db-password
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=stox # Specifies the default database name
      - POSTGRES_USER=dbadmin # Sets the PostgreSQL username
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_LOGGING_COLLECTOR=on # Enable logging collector
      - POSTGRES_LOG_DIRECTORY=/var/log/postgresql/logs # Set the log directory
      - POSTGRES_LOG_FILENAME=postgresql-%Y-%m-%d_%H%M%S.log # Log filename format
      - POSTGRES_LOG_CONNECTIONS=on # Log connection attempts
      - POSTGRES_LOG_DISCONNECTIONS=on # Log disconnection events
    expose:
      - 5432
    healthcheck:
      test: [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost -p $${POSTGRES_PORT}",
        ] # Specify user and db otherwise might got error that it attempts to use non-existing root user
      start_period: 60s
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data # Mounts volume for data persistence
      - postgres_logs:/var/log/postgresql/logs # Mount a volume for logs
    networks:
      - private # Assigns this service to the shared network

secrets:
  db-password:
    file: secrets/db_password.txt
  # cf_dns_api_token:
  #   file: secrets/cf_dns_api_token.txt

volumes: # Defines named volumes to persist data
  # letsencrypt: # Name of the volume for Let's Encrypt certificates
  postgres_data: # Name of the volume for PostgreSQL data
  postgres_logs: # Name of the volume for PostgreSQL logs
networks: # Defines the Docker network for communication
  public:
    driver: bridge # Uses the default bridge network driver
  private: # Name of the custom network for the services
    driver: bridge # Uses the default bridge network driver
